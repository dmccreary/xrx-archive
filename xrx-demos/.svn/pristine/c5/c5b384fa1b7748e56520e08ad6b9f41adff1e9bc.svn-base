xquery version "1.0";
import module namespace style = "http://danmccreary.com/style" at "/db/mdr/modules/style.xqm";

(: all-codes.xq: Collect all the code-tables and put them in a single XML document 
   that will be use as an instance in the model. :)
(: This allows you to send all the codes using a single http GET and cuts down on
   the multiple GETS for each code table. This is critical for fast form loading.  :)

declare option exist:serialize "method=xml media-type=text/xml indent=yes";


(: these are where we keep all static code tables that are shared between two or more applications :)
(: the base URI for this suite of applications.  e.g. /db/mycompany. :)
let $base := style:base-uri()
let $resources := concat($base, '/resources')
let $shared-code-table-collection := concat($resources, '/code-tables/')

let $app-collection := style:app-base-uri()
let $data-collection := concat($app-collection, '/data')
let $complex-element-query-uri := concat(style:server-port(), '/exist/rest', $app-collection, '/views/conceptual-xml.xq')

(: Step 1: or each pick-list we will fetch a list of things from the database. :)

(: First get all the static lists.  These are lists that are stored in raw native XML files but still indexed. :)
let $schema-type-codes := doc(concat($shared-code-table-collection, 'xml-schema-data-type-code.xml'))
let $representation-term-codes := doc(concat($shared-code-table-collection, 'representation-term-code.xml'))
let $data-element-approval-codes := doc(concat($shared-code-table-collection, 'data-element-approval-code.xml'))
let $namespace-uri-codes := doc(concat($shared-code-table-collection, 'namespace-uri-code.xml'))
let $approvers := doc(concat($shared-code-table-collection, 'approvers.xml'))
let $facilitators := doc(concat($shared-code-table-collection, 'facilitators.xml'))
let $classifiers := doc(concat($shared-code-table-collection, 'classifiers.xml'))

(: Now get the dynamic lists.  These are lists that are generated by another XQuery :)
(: This must call a service that gets all the complex or conceptual data elements. :)
(: Note that every time you and a new conceptual data element it is added to this list. :)
let $conceptual := doc($complex-element-query-uri)/CodeTable

(: Now wrap all the lists in a Codes element so it can get put into a single instace of the form. :)
return
<Codes>
   <path>{$complex-element-query-uri}</path>
   {$schema-type-codes}
   {$representation-term-codes}
   {$data-element-approval-codes}
   {$namespace-uri-codes}
   {$approvers}
   {$facilitators}
   {$classifiers}
   {$conceptual}
</Codes>
